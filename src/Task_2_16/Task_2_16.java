	
/*
	16. Магическим квадратом порядка n называется квадратная матрица размера n x n,
		составленная из чисел 1, 2, 3, ..., n в квадрате так, что суммы по каждому столбцу,
		каждой строке и каждой из двух больших диагоналей равны между
		собой. Построить такой квадрат.
*/
/*
		Нормальные магические квадраты существуют для всех порядков n >= 1,
		за исключением n=2, хотя случай n = 1 тривиален — квадрат состоит из одного числа.
*/
/*
		Сумма чисел в каждой строке, столбце и на диагоналях магического квадрата
		называется магической константой - M.
		Магическая константа нормального волшебного квадрата зависит
		только от n и определяется формулой :
		
		M(n) = ( n * ( n*n + 1 ) ) / 2
*/
	
package Task_2_16;
	
public class Task_2_16 {
	
	public static void main(String[] args) {
		
		System.out.println("-----------------------------------------------------");
		System.out.println("ПРОГРАММА : ПОСТРОЕНИЕ МАГИЧЕСКОГО КВАДРАТА ПОРЯДКА N");
		System.out.println("-----------------------------------------------------");
		
		int check1 = 0;
		
		do {
			
			// Ввод порядка магического квадрата N
			System.out.println("-------------------------------------------");
			System.out.println("Введите :  N - Порядок Магического Квадрата");
			System.out.println("-------------------------------------------");
			
			int N = 0;
			
			do {
				N = Task_2_16_res.InputInt();
				
				if ( N <= 0 )
					{
					System.out.println("--------------------------------------------------");
					System.out.println("Введенные данные меньше или равно 0. Введите снова");
					System.out.println("--------------------------------------------------");
					}
					
					if ( N < 3 )
					{
					System.out.println("----------------------------------------");
					System.out.println("Введенные данные меньше 3. Введите снова");
					System.out.println("----------------------------------------");
					}
					
			} while ( N <= 0 | N < 3);
			
			
			// Вычисление Магической константы нормального волшебного квадрата M
			int M = Task_2_16_res.MagConst(N);
			
			System.out.println("----------------------------------------------------------------------------------------");
			System.out.println("Порядок Магического Квадрата : " + N + "  ||  " + "Магическая константа волшебного Квадрата :  " + M );
			System.out.println("----------------------------------------------------------------------------------------");
			
			// Объявление двумерного массива
			int[][] matrix = new int[N][N];
			
			if ( N%2 != 0 ) {
				
				// Построение магического квадрата нечётного порядка : 3, 7, 9, 11, 13 и так далее
				matrix = Task_2_16_res.magicSquareOfOddOrder(N);
				
				System.out.println("----------------------------------------------------------------------------------------------");
				System.out.println("Метод построения Магического Квадрата для N нечетной размерности : 3, 7, 9, 11, 13 и так далее");
				System.out.println("----------------------------------------------------------------------------------------------");
				
			} else if ( N%2 == 0 & N%4 != 0 ) {
				
				// Построение магического квадрата чётного порядка : ( Метод для N четно-нечетной размерности (N кратно 2, но не кратно 4) ) : 6, 10, 14, 18, 22 и так далее
				matrix = Task_2_16_res.magicSquareOfEvenOddOrder(N);
				
				System.out.println("----------------------------------------------------------------");
				System.out.println("Метод построения Магического Квадрата для N четной размерности :");
				System.out.println("----------------------------------------------------------------------------------------------------");
				System.out.println("Метод для N четно-нечетной размерности (N кратно 2, но не кратно 4) : 6, 10, 14, 18, 22 и так далее");
				System.out.println("----------------------------------------------------------------------------------------------------");
				
			} if ( N%2 == 0 & N%4 == 0) {
				
				// Построение магического квадрата чётного порядка : Метод для N четно-четной размерности (N кратно 2 и 4) : 4, 8, 12, 16, 20 и так далее
				matrix = Task_2_16_res.evenMatrixSquare(N);
				
				System.out.println("----------------------------------------------------------------");
				System.out.println("Метод построения Магического Квадрата для N четной размерности :");
				System.out.println("----------------------------------------------------------------------------------------------------");
				System.out.println("Метод для N четно-четной размерности (N кратно 2 и 4) : 4, 8, 12, 16, 20 и так далее");
				System.out.println("----------------------------------------------------------------------------------------------------");
			}
			
			// Проверка построения Магического Квадрата
			int check = Task_2_16_res.TestMass( matrix, M, N );
			
			System.out.println("-------------------------------------------------------------");
			System.out.print("Проверка Магического Квадрата :  ");
			
			if (check == 1 ) {
				
				System.out.println("Квадрат является Магическим");
				System.out.println("-------------------------------------------------------------");
				
			} else if ( check == 0 ) {
				
				System.out.println("");
				System.out.println("-----------------------------------------------------------------------");
				System.out.println("Ошибка Построения Магического Квадрата");
				System.out.println("-----------------------------------------------------------------------");
			}
			
			System.out.println("-----------------------------------------------------------------------");
			
			if ( check == 1 ) {
				
				System.out.println("Построение Магического Квадрата. Вывод Магического квадрата на печать :");
				System.out.println("-----------------------------------------------------------------------");
				
				System.out.println("-----------------------------------------------------------------------------------------------------------------------------------------------------------------");
				Task_2_16_res.PrintMass(matrix);
				System.out.println("-----------------------------------------------------------------------------------------------------------------------------------------------------------------");
			}
			
			check1 = Task_2_16_res.repeat();
			
		} while ( check1 == 1 );
		
	}
	
}
